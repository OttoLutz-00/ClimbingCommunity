@model ClimbingCommunity.Models.ClimberCreate

@{
    ViewBag.Title = "Create";
}

<h2 class="display-4 greentext">My Account</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <hr / class="bg-dark">


    @if (TempData["ClimberMessage"] != null)
    {
        <div class="alert alert-info alert-dismissible m-0 p-3 m-2" role="alert">

            <p class="d-inline ms-2">@TempData["ClimberMessage"]</p>

            <button type="button" class="btn btn-outline-info close align-top mt-auto" data-dismiss="alert">
                <img src="~/Assets/bs-icons/x-lg.svg" alt="Alternate Text" class="d-inline align-text-bottom align-middle my-1" width="25px" />
            </button>

        </div>
    }



    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Bio, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Bio, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Bio, "", new { @class = "text-danger" })
        </div>
    </div>

    <!--SELECT LIST SECTION-->
    <div class="form-group">
        @Html.LabelFor(model => model.GymId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @{
                var selectList = new List<SelectListItem>();

                selectList.Add(new SelectListItem { Text = "Select a Home Gym", Value = "0", Selected = true, Disabled = true });

                foreach (var item in ViewBag.gymList)
                {
                    selectList.Add(new SelectListItem { Text = item.Name, Value = item.GymId.ToString() });
                }

            }
            @Html.DropDownListFor(model => model.GymId, selectList, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.GymId, "", new { @class = "text-danger" })
        </div>
    </div>
    <!--SELECT LIST SECTION-->

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-outline-secondary greentext" id="nopadding" />
            @Html.ActionLink("Back to List", "Index", null, htmlAttributes: new { @class = "btn btn-outline-secondary" })
        </div>
    </div>
</div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
