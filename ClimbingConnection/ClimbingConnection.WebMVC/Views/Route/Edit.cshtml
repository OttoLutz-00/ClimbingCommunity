@model ClimbingCommunity.Models.RouteModels.RouteEdit

@{
    ViewBag.Title = "Edit";
}

<style>

    #check-box {
        width: 2rem !IMPORTANT;
        height: 2rem !IMPORTANT;
    }

</style>

<h2 class="display-3 greentext">Edit Route</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.HiddenFor(model => model.RouteId)
        <hr / class="bg-dark">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Grade, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Grade, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Grade, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p class = "control-label col-md-3">Is this route currently up?</p>
            <div class="col-md-10">
                <div class="checkbox">
                     @Html.CheckBoxFor(model => model.IsOnWall, new { id = string.Format("check-box") })
                     @Html.ValidationMessageFor(model => model.IsOnWall, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-outline-secondary greentext" id="nopadding" />
            </div>
        </div>
    </div>
}
<hr / class="bg-dark">
<div>
    @Html.ActionLink("Back to List", "Index",null,htmlAttributes: new { @class="btn btn-outline-secondary", id="nopadding"})
</div>
