@model IEnumerable<ClimbingCommunity.Models.RouteModels.RouteListItem>

@{
    ViewBag.Title = "Gym";
}


@{
    if (Model.Count() == 0)
    {
        <p class="display-4 d-inline">This gym has no routes </p>
        <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-emoji-frown d-inline align-top mt-3" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
            <path d="M4.285 12.433a.5.5 0 0 0 .683-.183A3.498 3.498 0 0 1 8 10.5c1.295 0 2.426.703 3.032 1.75a.5.5 0 0 0 .866-.5A4.498 4.498 0 0 0 8 9.5a4.5 4.5 0 0 0-3.898 2.25.5.5 0 0 0 .183.683zM7 6.5C7 7.328 6.552 8 6 8s-1-.672-1-1.5S5.448 5 6 5s1 .672 1 1.5zm4 0c0 .828-.448 1.5-1 1.5s-1-.672-1-1.5S9.448 5 10 5s1 .672 1 1.5z" />
        </svg>
        @Html.ActionLink("Add a Route", "Create", null, htmlAttributes: new { @class = "btn btn-outline-secondary greentext ml-4 mb-4", id = "nopadding", style = "padding: 1rem!important;" })
    }
    else
    {
        var gymInfo = Model.First(e => e.GymName != null);




        <h2 class="display-3 greentext mb-0">@gymInfo.GymName.ToString()</h2>
        <p>@gymInfo.GymLocation.ToString()</p>
        <div>
            <p class="" style="font-size: x-large">
                · @gymInfo.GymDescription.ToString()
            </p>
            <p class="d-inline greentext ml-auto" style="font-size: xx-large">@gymInfo.GymNumberOfRoutes</p>
            <p class="d-inline" style="font-size: x-large">routes up right now.</p>
        </div>

        <hr / class="bg-dark">

        <p class="display-3 greentext">Routes</p>
        <p>
            Can't find a route? @Html.ActionLink("Add a Route", "Create")
        </p>

        <table class="table" style="color: whitesmoke;">
            <tr>

                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Grade)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Description)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.GymName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ClimberUsername)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.DateSet)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TotalSends)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.IsOnWall)
                </th>
                <th></th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>

                    <td class="greentext">
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        <p class="d-inline">V</p>@Html.DisplayFor(modelItem => item.Grade)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.GymName)
                    </td>
                    <td class="greentext">
                        @Html.DisplayFor(modelItem => item.ClimberUsername)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DateSet)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TotalSends)
                    </td>
                    <td>
                        @if (item.IsOnWall == true)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="#9FFF1C" class="bi bi-check-circle-fill" viewBox="0 0 16 16">
                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                            </svg>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="#FF443E" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                            </svg>
                        }
                    </td>
                    <td>

                        @Html.ActionLink("View Route", "Details", new { id = item.RouteId }, htmlAttributes: new { @class = "btn btn-outline-secondary", id = "nopadding", style = "color: whitesmoke;" })

                    </td>
                </tr>
            }

        </table>

    }
}